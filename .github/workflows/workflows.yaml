name: 'Multi-Architecture Docker Build'
on:
  workflow_call:
    inputs:
      images:
        description: 'Name of images to build'
        required: true
        type: string
      acr-registry-url:
        description: 'The url of the ACR registry to fetch credentials from'
        required: false
        type: string
        default: 'tignis.azurecr.io'        
      push:
        description: 'Also push the image to the remote repository'
        required: false
        type: string
        default: 'true'
      docker-build-context:
        description: 'Build context for docker'
        required: false
        type: string
        default: '.'
      dockerfile:
        description: 'Name of the docker file to use'
        required: false
        type: string
        default: 'Dockerfile'
      GITHUB_TOKEN:
        description: 'Github token of the repository'
        required: false
        type: string
        default: ${{ github.token }}      
    secrets:
      acr-username:
        description: 'Username to use when logging into ACR'
        required: true
      acr-password:
        description: 'Password to use when logging into ACR'
        required: true
      pip-extra-index-url:
        description: 'The PIP_EXTRA_INDEX_URL for private pip packages'
        required: true
    outputs:
      tag:
        description: 'Final tag used for the multi-architecture docker image'
        value: ${{ jobs.docker-manifest.outputs.tag }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  docker-amd64:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.docker.outputs.tag }}
      digest: ${{ steps.digest.outputs.digest }}
      image: ${{ inputs.images }}
      tag-prefix: arm64-
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build and Push docker image (AMD64)
        id: docker
        uses: tignis/docker-github-action@31f23964bad69de8e2731bdbe4977825e3447b6b
        with:
          images: ${{ inputs.images }}
          acr-username: ${{ secrets.acr-username }}
          acr-password: ${{ secrets.acr-password }}
          acr-registry-url: ${{ inputs.acr-registry-url }}
          pip-extra-index-url: ${{ secrets.pip-extra-index-url }}
          push: ${{ inputs.push }}
          docker-build-context: ${{ inputs.docker-build-context }}
          dockerfile: ${{ inputs.dockerfile }}
          platforms: 'linux/amd64'
          tag-prefix: 'amd64-'
          GITHUB_TOKEN: ${{ inputs.token }}
          

  docker-arm64:
    runs-on: [self-hosted, linux, ARM64]
    outputs:
      tag: ${{ steps.docker.outputs.tag }}
      digest: ${{ steps.digest.outputs.digest }}
      tag-prefix: arm64-
      image: ${{ inputs.images }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build and Push docker image (ARM64)
        id: docker
        uses: tignis/docker-github-action@31f23964bad69de8e2731bdbe4977825e3447b6b
        with:
          images: ${{ inputs.images }}
          acr-username: ${{ secrets.acr-username }}
          acr-password: ${{ secrets.acr-password }}
          acr-registry-url: ${{ inputs.acr-registry-url }}
          pip-extra-index-url: ${{ secrets.pip-extra-index-url }}
          push: ${{ inputs.push }}
          docker-build-context: ${{ inputs.docker-build-context }}
          dockerfile: ${{ inputs.dockerfile }}
          platforms: 'linux/arm64'
          tag-prefix: 'arm64-'
          GITHUB_TOKEN: ${{ inputs.token }}

  docker-manifest:
    needs: [docker-amd64, docker-arm64]
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.acr-registry-url }}
          username: ${{ secrets.acr-username }}
          password: ${{ secrets.acr-password }}
      
      - name: Extract clean tag
        id: clean-tag
        run: |
          AMD64_TAG=${{ needs.docker-amd64.outputs.tag }}
          CLEAN_TAG=${AMD64_TAG#*:amd64-}
          echo "value=${CLEAN_TAG}" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.images }}
          tags: |
            type=raw,value=${{ steps.clean-tag.outputs.value }}
      
      - name: Create and push manifest
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          # This creates a manifest list from existing images
          cache-from: |
            type=registry,ref=${{ needs.docker-amd64.outputs.tag }}
            type=registry,ref=${{ needs.docker-arm64.outputs.tag }}
