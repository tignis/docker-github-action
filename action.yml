name: 'Docker Build and Push'
description: 'Build and optionally push a docker image to ACR with multi-architecture support'
inputs:
  images:
    description: 'Name of images to build'
    required: true
  acr-username:
    description: 'Username to use when logging into ACR'
    required: true
  acr-password:
    description: 'Password to use when logging into ACR'
    required: true
  acr-registry-url:
    description: 'The url of the ACR registry to fetch credentials from'
    required: false
    default: 'tignis.azurecr.io'
  pip-extra-index-url:
    description: 'The PIP_EXTRA_INDEX_URL to include as a secret'
    required: true
  push:
    description: 'Also push the image to the remote repository'
    required: false
    default: 'true'
  docker-build-context:
    description: 'Build context for docker if not the current directory'
    required: false
    default: '.'
  dockerfile:
    description: 'Name of the docker file to use'
    required: false
    default: 'Dockerfile'
  platforms:
    description: 'Comma separated list of platforms to use for docker build'
    required: false
    default: 'linux/amd64'
  multi-arch:
    description: 'Enable multi-architecture support with manifest creation'
    required: false
    default: 'false'
  runner-architecture:
    description: 'Architecture of the current runner (for multi-arch builds)'
    required: false
    default: 'amd64'
  create-manifest:
    description: 'Create and push a multi-arch manifest (only for multi-arch coordinator)'
    required: false
    default: 'false'
  architecture-tags:
    description: 'JSON string with architecture-specific image tags (for manifest creation)'
    required: false
    default: '{}'
  GITHUB_TOKEN:
    description: 'Github token of the repository'
    default: ${{ github.token }}
    required: false
outputs:
  tag:
    description: 'Full tag used for the docker image'
    value: ${{ steps.meta.outputs.tags }}
  arch-tag:
    description: 'Architecture-specific tag for multi-arch builds'
    value: ${{ steps.arch-tag.outputs.tag }}
  digests:
    description: 'Image digests for manifest creation'
    value: ${{ steps.docker_build.outputs.digest }}
runs:
  using: "composite"
  steps:
    - name: Debug inputs
      run: echo ${{ inputs.platforms }}
      shell: bash  
    - name: Get build info
      run: |
        echo "DATE=$(date -u +%F)" >> $GITHUB_ENV
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      shell: bash
    - name: Get build info pull request
      run: |
        echo "BRANCH_NAME=${{github.head_ref}}" >> $GITHUB_ENV
      if: ${{ startsWith(github.event_name, 'pull_request') }}
      shell: bash
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        # list of Docker images to use as base name for tags
        images: ${{ inputs.images }}
        flavor: |
          latest=false
        # generate Docker tags based on the following events/attributes
        tags: |
          type=sha,prefix=${{inputs.tag-prefix}}${{env.BRANCH_NAME}}-${{env.DATE}}-${{github.run_number}}-,enable=${{ !startsWith(github.event_name, 'release') }}
          type=semver,pattern=${{inputs.tag-prefix}}{{version}},enable=${{ startsWith(github.event_name, 'release') }}
    - name: Set up Docker Context for Buildx
      id: buildx-context
      run: |
        docker context create builders
      shell: bash
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        endpoint: builders
    - name: Login to ACR
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.acr-registry-url }}
        username: ${{ inputs.acr-username }}
        password: ${{ inputs.acr-password }}
    - name: Login to tignis ACR
      uses: docker/login-action@v3
      with:
        registry: 'tignis.azurecr.io'
        username: ${{ inputs.acr-username }}
        password: ${{ inputs.acr-password }}
    - name: Build and push
      id: docker_build
      if: ${{ inputs.create-manifest != 'true' }}  # Skip this step for manifest creation
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.docker-build-context }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.platforms }}
        secrets: |
          "pipconf=[global]
          extra-index-url = ${{ inputs.pip-extra-index-url }}"
        file: ${{ inputs.dockerfile }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
      shell: bash
    - name: Comment latest docker image
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Use GitHub API to create a comment on the PR
        PR_NUMBER=${{ github.event.pull_request.number }}
        COMMENT='Docker image built: `${{ steps.meta.outputs.tags }}`'
        GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}
        COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"

        curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"${COMMENT}\"}"
    - name: Set architecture tag
      id: arch-tag
      if: ${{ inputs.multi-arch == 'true' }}
      shell: bash
      run: |
        FULL_TAG="${{ steps.meta.outputs.tags }}"
        ARCH="${{ inputs.runner-architecture }}"
        echo "tag=${FULL_TAG}-${ARCH}" >> $GITHUB_OUTPUT
    - name: Create multi-architecture manifest
      if: ${{ inputs.create-manifest == 'true' }}
      shell: bash
      run: |
        # Parse the architecture tags JSON
        ARCH_TAGS='${{ inputs.architecture-tags }}'
        echo "Arch tags: $ARCH_TAGS"
        BASE_IMAGE=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ':' -f 1)
        BASE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ':' -f 2)
        
        # Create manifest command with all architectures
        MANIFEST_CMD="docker manifest create ${BASE_IMAGE}:${BASE_TAG}"
        
        # Add each architecture-specific image to the manifest
        for ARCH_TAG in $(echo $ARCH_TAGS | jq -r 'keys[]'); do
          DIGEST=$(echo $ARCH_TAGS | jq -r ".[\"$ARCH_TAG\"]")
          MANIFEST_CMD="$MANIFEST_CMD ${BASE_IMAGE}@${DIGEST}"
        done
        echo "Executing manifest command: $MANIFEST_CMD"
        # Execute the manifest commands
        eval $MANIFEST_CMD
        docker manifest push ${BASE_IMAGE}:${BASE_TAG}
